/* <script>
                window.addEventListener('load', matchHeight);
                window.addEventListener('resize', matchHeight);
            
                function matchHeight() {
                var skills = document.getElementsByClassName('skills')[0];
                var involvemen = document.getElementsByClassName('involvemen')[0];
                var durability = document.getElementsByClassName('durability')[0];
                var lifecondition = document.getElementsByClassName('lifecondition')[0];
                var box1Height = skills.offsetHeight;
                involvemen.style.height = box1Height + 'px';
                durability.style.height = box1Height + 'px';
                lifecondition.style.height = box1Height + 'px';
                }

                const bubblesSets = document.querySelectorAll('.bubbles');
            
                bubblesSets.forEach(bubbles => {
                    const checkboxes = bubbles.querySelectorAll('input[type="checkbox"]');
                    
                    checkboxes.forEach((checkbox, index) => {
                        checkbox.addEventListener('click', () => {
                            if (checkbox.checked) {
                                for (let i = index + 1; i < checkboxes.length; i++) {
                                    checkboxes[i].checked = false;
                                }
                            } else {
                                checkboxes.forEach((cb, idx) => {
                                    if (idx > index) {
                                        cb.checked = false;
                                    }
                                });
                            }
                        });
                    });
                });

                function updateProficiencyBonus() {
                    const level = parseInt(document.getElementById('levelvalue').value);
                    let proficiencyBonus;
                    if (level >= 5 && level <= 8) {
                        proficiencyBonus = 3;
                    } else if (level >= 9 && level <= 12) {
                        proficiencyBonus = 4;
                    } else if (level >= 13 && level <= 16) {
                        proficiencyBonus = 5;
                    } else if (level >= 17 && level <= 20) {
                        proficiencyBonus = 6;
                    } else {
                        proficiencyBonus = 2;
                    }
                    document.getElementById('pb').value = '+' + proficiencyBonus;
                    return parseInt(proficiencyBonus);
                }

                function calculateModifier(score) {
                    return Math.floor((score - 10) / 2);
                }

                function formatModifier(mod) {
                    return (mod >= 0 ? '+' : '') + mod;
                }

                function updateAbilityModifier(ability) {
                    const score = parseInt(document.getElementById(ability + 'score').value) || 10;
                    const mod = calculateModifier(score);
                    document.getElementById(ability + 'mod').value = formatModifier(mod);
                    updateSaveModifier(ability, mod);
                }

                function updateSaveModifier(ability, abilityMod) {
                    const profCheckbox = document.getElementById(ability + 'prof');
                    const proficiencyBonus = parseInt(document.getElementById('pb').value);
                    let saveMod = abilityMod;
                    if (profCheckbox.checked) {
                        saveMod += proficiencyBonus;
                    }
                    document.getElementById(ability + 'savemod').value = formatModifier(saveMod);
                }

                document.getElementById('levelvalue').addEventListener('input', function() {
                    updateProficiencyBonus();
                    updateAllModifiers();
                });

                ['phy', 'agi', 'min', 'wil'].forEach(ability => {
                    document.getElementById(ability + 'score').addEventListener('input', function() {
                        updateAbilityModifier(ability);
                    });
                    document.getElementById(ability + 'prof').addEventListener('change', function() {
                        const abilityMod = calculateModifier(parseInt(document.getElementById(ability + 'score').value) || 10);
                        updateSaveModifier(ability, abilityMod);
                    });
                });

                function updateAllModifiers() {
                    ['phy', 'agi', 'min', 'wil'].forEach(ability => {
                        updateAbilityModifier(ability);
                    });
                }

                document.addEventListener('DOMContentLoaded', function() {
                    updateAllModifiers();
                });

                function updateCurrentHpMax() {
                    const maxHp = parseInt(document.getElementById('maxhp').value) || 0;
                    const currentHpInput = document.getElementById('currenthp');
                    currentHpInput.max = maxHp;
                    if (parseInt(currentHpInput.value) > maxHp) {
                        currentHpInput.value = maxHp;
                    }
                }

                document.getElementById('maxhp').addEventListener('input', updateCurrentHpMax);

                document.addEventListener('DOMContentLoaded', function() {
                    updateCurrentHpMax();
                });

                function updateArmor1AC() {
                    const agiScore = parseInt(document.getElementById('agiscore').value) || 10;
                    const agiMod = calculateModifier(agiScore);
                    document.getElementById('armor1ac').value = 10 + agiMod;
                    updateAC();
                }

                function updateAC() {
                    const agiScore = parseInt(document.getElementById('agiscore').value) || 10;
                    const agiMod = calculateModifier(agiScore);
                    document.getElementById('agimod').value = (agiMod >= 0 ? '+' : '') + agiMod;

                    let selectedArmorAC = 0;
                    if (document.getElementById('armor1ison').checked) {
                        selectedArmorAC = 10 + agiMod;
                    } else if (document.getElementById('armor2ison').checked) {
                        selectedArmorAC = parseInt(document.getElementById('armor2ac').value) || 0;
                    } else if (document.getElementById('armor3ison').checked) {
                        selectedArmorAC = parseInt(document.getElementById('armor3ac').value) || 0;
                    }

                    let shieldVal = document.getElementById('shieldison').checked
                        ? parseInt(document.getElementById('shieldval').value) || 0
                        : 0;

                    const ac = selectedArmorAC + shieldVal;
                    document.getElementById('ac').value = ac;
                }

                document.getElementById('shieldison').addEventListener('change', updateAC);
                document.getElementById('shieldval').addEventListener('input', updateAC);
                document.getElementById('agiscore').addEventListener('input', updateArmor1AC);

                document.querySelectorAll('.armors input[type="checkbox"]').forEach((checkbox) => {
                    checkbox.addEventListener('change', (event) => {
                        if (event.target.checked) {
                            document.querySelectorAll('.armors input[type="checkbox"]').forEach((cb) => {
                                if (cb !== event.target) cb.checked = false;
                            });
                        }
                        updateAC();
                    });
                });

                document.querySelectorAll('.armors input[type="number"]').forEach((input) => {
                    input.addEventListener('input', updateAC);
                });

                document.addEventListener('DOMContentLoaded', function() {
                    //Встановити значення за замовчуванням для Неброньованого обладунку
                    updateArmor1AC();
                });
            </script> */